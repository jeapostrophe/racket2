TODO always prefix-in, always only-in

TODO implement match def-transformer and see how it looks

TODO think about interface language part of theory/interface/modules

TODO add syntax property for def transformer on RHS (for function call
results, alloc, etc)

TODO #%dot app syntax differently

TODO facts/properties macro

TODO No set! (use data-structure mutation and :=)

(def (var x) 5)
{x := 6}
{x ‚Üê 6}

TODO No effects or expressions at top-level (controversial, mf says wrong) [set-once!]

TODO "Versioned" libraries

TODO New structs (more reflective information, representation control, sealing)

TODO Implicit units and interfaces (with properties)

TODO Generics everywhere
https://github.com/stamourv/generic-collections

(define (foo (var x) (~opt y 17) (posn p))
 {x := z + 13}
 {p.x + p.y})

TODO Immutable strings only

TODO Bindings & keywords everywhere

TODO Less representation constraints

TODO Meaningless eq? semantics

TODO More unicode!

TODO Unboxed, raw data

TODO Don't use English in exceptions and have more structured exns
[demo on raco/pkg]

english in error messages is good, but adding a markup language instead of just supporting strings

TODO (Define-default-type Number x y z)
  [for define things too]

TODO zos don't appear to users (switch to interp if no write access)

TODO only use syntax-parse and define-simple-macro

TODO @literate

TODO @docs

TODO how to make sure cases of cond/etc are complete?

A bare minimum dynamic solution is to do a module-lift to a test
property that use enumeration to enumerate inputs and that sort of
thing. A bare minimum static solution is to have the data and the
variants and a mapping between cases and the variants. It may require
too much knowledge on the data structure than is Rackety.

TODO operator overloading definitions of + and ones that check the
types for float/int/fixnum/etc
